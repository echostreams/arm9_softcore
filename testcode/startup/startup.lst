ARM GAS  /tmp/ccUFenCF.s 			page 1


   1              	# 1 "startup.S"
   1              	#
   1              	...
   0              	
   0              	
   2              	# *** Startup Code (executed after Reset) ***
   3              	#
   4              	
   5              	#include "config.h"
   1              	/******************************************************************************
   6              	
   7              	# Standard definitions of Mode bits and Interrupt (I & F) flags in PSRs
   8              	
   9              	        .equ    Mode_USR,       0x10
  10              	        .equ    Mode_FIQ,       0x11
  11              	        .equ    Mode_IRQ,       0x12
  12              	        .equ    Mode_SVC,       0x13
  13              	        .equ    Mode_ABT,       0x17
  14              	        .equ    Mode_UND,       0x1B
  15              	        .equ    Mode_SYS,       0x1F
  16              	
  17              	        .equ    I_Bit,          0x80        /* when I bit is set, IRQ is disabled */
  18              	        .equ    F_Bit,          0x40        /* when F bit is set, FIQ is disabled */
  19              	
  20              	        .equ    sram_bottom, SRAM_SADDR
  21              	        .equ    sram_top,    SRAM_TOP
  22              	        .equ    stackTop,    SRAM_TOP
  23              	
  24              	#define VAL_PLLCFG_MSEL  ((PLL_MUL - 1) << 0)
  25              	#if (PLL_DIV == 1)
  26              	#define PLL_DIV_VALUE 0x00
  27              	#elif (PLL_DIV == 2)
  28              	#define PLL_DIV_VALUE 0x01
  29              	#elif (PLL_DIV == 4)
  30              	#define PLL_DIV_VALUE 0x10
  31              	#elif (PLL_DIV == 8)
  32              	#define PLL_DIV_VALUE 0x11
  33              	#endif
  34              	#define VAL_PLLCFG_PSEL  (PLL_DIV_VALUE << 5)
  35              	#define VAL_PLLCFG       (VAL_PLLCFG_MSEL | VAL_PLLCFG_PSEL)
  36              	
  37              	# Phase Locked Loop (PLL) definitions
  38              	        .equ    PLL_BASE,       0xE01FC080  /* PLL Base Address */
  39              	        .equ    PLLCON_OFS,     0x00        /* PLL Control Offset*/
  40              	        .equ    PLLCFG_OFS,     0x04        /* PLL Configuration Offset */
  41              	        .equ    PLLSTAT_OFS,    0x08        /* PLL Status Offset */
  42              	        .equ    PLLFEED_OFS,    0x0C        /* PLL Feed Offset */
  43              	        .equ    PLLCON_PLLE,    (1<<0)      /* PLL Enable */
  44              	        .equ    PLLCON_PLLC,    (1<<1)      /* PLL Connect */
  45              	        .equ    PLLSTAT_PLOCK,  (1<<10)     /* PLL Lock Status */
  46              	
  47              	#define HANDLER(HandlerLabel,HandleLabel) \
  48              	HandlerLabel:                   ;\
  49              	        sub   sp, sp, #4        ;\
  50              	        stmfd sp!, {r0}         ;\
  51              	        ldr   r0, =HandleLabel  ;\
  52              	        ldr   r0, [r0]          ;\
ARM GAS  /tmp/ccUFenCF.s 			page 2


  53              	        str   r0, [sp,#4]       ;\
  54              	        ldmfd sp!, {r0,pc}
  55              	
  56              	# Starupt Code must be linked first at Address at which it expects to run.
  57              	
  58              	        .text
  59              	        .arm
  60              	# ******************************************************************************
  61              	#   Declare external function
  62              	# ******************************************************************************
  63              	        .extern lowLevelInit
  64              	        .extern exceptionHandlerInit
  65              	
  66              	        .global _startup
  67              	        .func   _startup
  68              	_startup:
  69              	
  70              	# Exception Vectors
  71              	# Mapped to Address 0.
  72              	
  73              	Vectors:
  74              	_vectors:
  75              	# If vectors are in FLASH, starting at 0x00000000
  76              	#if (MAM_MAP == 1)
  77:startup.S     ****                 B handleReset               /* jump to reset code              */
  78:startup.S     ****                 B HandlerUndef              /* handlerUndef                    */
  79:startup.S     ****                 B HandlerSWI                /* SWI interrupt handler           */
  80:startup.S     ****                 B HandlerPabort             /* handlerPAbort                   */
  81:startup.S     ****                 B HandlerDabort             /* handlerDAbort                   */
  82:startup.S     ****                 NOP                         /* Reserved Vector                 */
  83              	#if (IRQ_HANDLER == 0)
  84              	                B HandlerIRQ                /* handlerIRQ                      */
  85              	#else
  86:startup.S     ****                 LDR PC,[PC,#-0xFF0]         /* jump to address supplied by VIC */
  87              	#endif
  88:startup.S     ****                 B HandlerFIQ                /* handlerFIQ                      */
  89              	
  90              	# Create handlers
  91:startup.S     **** HANDLER(HandlerUndef,  HandleUndef)
  92:startup.S     **** HANDLER(HandlerSWI,    HandleSWI)
  93:startup.S     **** HANDLER(HandlerPabort, HandlePabort)
  94:startup.S     **** HANDLER(HandlerDabort, HandleDabort)
  95              	#if (IRQ_HANDLER == 0)
  96              	HANDLER(HandlerIRQ,    HandleIRQ)
  97              	#endif
  98:startup.S     **** HANDLER(HandlerFIQ,    HandleFIQ)
  99              	
 100              	# If vectors are in RAM, starting at 0x40000000
 101              	#else
 102              	                LDR PC,[PC,#resetHandlerAddress - . - 8]    /* handle reset                      */
 103              	                LDR PC,[PC,#undefHandlerAddress - . - 8]    /* handlerUndef                      */
 104              	                LDR PC,[PC,#swiHandlerAddress - . - 8]      /* SWI interrupt handler             */
 105              	                LDR PC,[PC,#pabortHandlerAddress - . - 8]   /* handlerPAbort                     */
 106              	                LDR PC,[PC,#dabortHandlerAddress - . - 8]   /* handlerDAbort                     */
 107              	                NOP                                         /* Reserved Vector                   */
 108              	#if (IRQ_HANDLER == 0)
 109              	                LDR PC,[PC,#irqHandlerAddress - . - 8]      /* jump to common irq handler        */
ARM GAS  /tmp/ccUFenCF.s 			page 3


 110              	#else
 111              	                LDR PC,[PC,#-0xFF0]                         /* jump to address supplied from VIC */
 112              	#endif
 113              	                LDR PC,[PC,#fiqHandlerAddress - . - 8]      /* handlerFIQ                        */
 114              	
 115              	resetHandlerAddress:
 116              	  .word handleReset
 117              	
 118              	undefHandlerAddress:
 119              	  .word 0
 120              	
 121              	swiHandlerAddress:
 122              	  .word 0
 123              	
 124              	pabortHandlerAddress:
 125              	  .word 0
 126              	
 127              	dabortHandlerAddress:
 128              	  .word 0
 129              	
 130              	irqHandlerAddress:
 131              	  .word 0
 132              	
 133              	fiqHandlerAddress:
 134              	  .word 0
 135              	
 136              	#endif
 137              	
 138              	# Reset Handler
 139              	handleReset:
 140              	
 141              	#if (USE_PLL == 1)
 142              	                LDR     R0, =PLL_BASE
 143              	                MOV     R1, #0xAA
 144              	                MOV     R2, #0x55
 145              	
 146              	# Disable PLL before programming (in case it was enabled before)
 147              	                MOV     R3, #0
 148              	                STR     R3, [R0, #PLLCON_OFS]
 149              	                STR     R1, [R0, #PLLFEED_OFS]
 150              	                STR     R2, [R0, #PLLFEED_OFS]
 151              	
 152              	# Wait for 		
 153              	# Configure and Enable PLL
 154              	                MOV     R3, #VAL_PLLCFG
 155              	                STR     R3, [R0, #PLLCFG_OFS] 
 156              	                MOV     R3, #PLLCON_PLLE
 157              	                STR     R3, [R0, #PLLCON_OFS]
 158              	                STR     R1, [R0, #PLLFEED_OFS]
 159              	                STR     R2, [R0, #PLLFEED_OFS]
 160              	
 161              	# Wait until PLL Locked
 162              	PLL_Loop:       LDR     R3, [R0, #PLLSTAT_OFS]
 163              	                ANDS    R3, R3, #PLLSTAT_PLOCK
 164              	                BEQ     PLL_Loop
 165              	
 166              	# Switch to PLL Clock
ARM GAS  /tmp/ccUFenCF.s 			page 4


 167              	                MOV     R3, #(PLLCON_PLLE | PLLCON_PLLC)
 168              	                STR     R3, [R0, #PLLCON_OFS]
 169              	                STR     R1, [R0, #PLLFEED_OFS]
 170              	                STR     R2, [R0, #PLLFEED_OFS]
 171              	#endif
 172              	
 173              	
 174              	# Setup Stack for each mode
 175:startup.S     ****                 LDR     R0, =stackTop
 176              	
 177              	#  Enter Undefined Instruction Mode and set its Stack Pointer
 178:startup.S     ****                 MSR     CPSR_c, #Mode_UND|I_Bit|F_Bit
 179:startup.S     ****                 MOV     SP, R0
 180:startup.S     ****                 SUB     R0, R0, #stackSize_UND
 181              	
 182              	#  Enter Abort Mode and set its Stack Pointer
 183:startup.S     ****                 MSR     CPSR_c, #Mode_ABT|I_Bit|F_Bit
 184:startup.S     ****                 MOV     SP, R0
 185:startup.S     ****                 SUB     R0, R0, #stackSize_ABT
 186              	
 187              	#  Enter FIQ Mode and set its Stack Pointer
 188:startup.S     ****                 MSR     CPSR_c, #Mode_FIQ|I_Bit|F_Bit
 189:startup.S     ****                 MOV     SP, R0
 190:startup.S     ****                 SUB     R0, R0, #stackSize_FIQ
 191              	
 192              	#  Enter IRQ Mode and set its Stack Pointer
 193:startup.S     ****                 MSR     CPSR_c, #Mode_IRQ|I_Bit|F_Bit
 194:startup.S     ****                 MOV     SP, R0
 195:startup.S     ****                 SUB     R0, R0, #stackSize_IRQ
 196              	
 197              	#  Enter Supervisor Mode and set its Stack Pointer
 198:startup.S     ****                 MSR     CPSR_c, #Mode_SVC|I_Bit|F_Bit
 199:startup.S     ****                 MOV     SP, R0
 200:startup.S     ****                 SUB     R0, R0, #stackSize_SVC
 201              	
 202              	#  Enter System Mode and set its Stack Pointer
 203:startup.S     ****                 MSR     CPSR_c, #Mode_SYS|I_Bit|F_Bit
 204:startup.S     ****                 MOV     SP, R0
 205              	
 206              	#  Setup a default Stack Limit (when compiled with "-mapcs-stack-check")
 207:startup.S     ****                 SUB     SL, SP, #stackSize_SYS
 208              	
 209              	#if (MAM_MAP == 2)
 210              	# Copy exception vectors into SRAM
 211              	                MOV     R8, #SRAM_SADDR
 212              	                LDR     R9, =Vectors
 213              	#               Move exception vectors (7 vectors + 1 reserved)
 214              	                LDMIA   R9!, {R0-R7}
 215              	                STMIA   R8!, {R0-R7}
 216              	#               Move addresses belonging to exception vectors (7 addresses)
 217              	                LDMIA   R9!, {R0-R6}
 218              	                STMIA   R8!, {R0-R6}
 219              	#endif
 220              	
 221              	#  Call low-level initialization
 222:startup.S     ****                 BL      lowLevelInit
 223              	
ARM GAS  /tmp/ccUFenCF.s 			page 5


 224              	# Relocate .data section (Copy from ROM to RAM)
 225:startup.S     ****                 LDR     R1, =_etext
 226:startup.S     ****                 LDR     R2, =_data
 227:startup.S     ****                 LDR     R3, =_edata
 228:startup.S     **** LoopRel:        CMP     R2, R3
 229:startup.S     ****                 LDRLO   R0, [R1], #4
 230:startup.S     ****                 STRLO   R0, [R2], #4
 231:startup.S     ****                 BLO     LoopRel
 232              	
 233              	# Clear .bss section (Zero init)
 234:startup.S     ****                 MOV     R0, #0
 235:startup.S     ****                 LDR     R1, =__bss_start__
 236:startup.S     ****                 LDR     R2, =__bss_end__
 237:startup.S     **** LoopZI:         CMP     R1, R2
 238:startup.S     ****                 STRLO   R0, [R1], #4
 239:startup.S     ****                 BLO     LoopZI
 240              	
 241              	# Initialize exception vectors
 242:startup.S     ****                 BL      exceptionHandlerInit
 243              	
 244              	# Enter the C code
 245              	Jump_To_Main:
 246:startup.S     ****                 ADR     LR, __Return_from_Main           
 247:startup.S     ****                 MOV     R0, #0
 248:startup.S     ****                 MOV     R1, #0
 249:startup.S     ****                 LDR     R2, =main
 250:startup.S     ****                 BX      R2
 251              	
 252              	__Return_from_Main:
 253:startup.S     ****                 B       __Return_from_Main	 
 254              	
 255              	        .size   _startup, . - _startup
 256              	        .endfunc
 257              	
 258              	
 259              	#
 260              	# Reserve memory for exception handlers
 261              	#
 262 0138 24000040 	        .struct SRAM_SADDR + 0x20
 262      28000040 
 262      2C000040 
 262      30000040 
 262      38000040 
ARM GAS  /tmp/ccUFenCF.s 			page 6


DEFINED SYMBOLS
           startup.S:9      *ABS*:0000000000000010 Mode_USR
           startup.S:10     *ABS*:0000000000000011 Mode_FIQ
           startup.S:11     *ABS*:0000000000000012 Mode_IRQ
           startup.S:12     *ABS*:0000000000000013 Mode_SVC
           startup.S:13     *ABS*:0000000000000017 Mode_ABT
           startup.S:14     *ABS*:000000000000001b Mode_UND
           startup.S:15     *ABS*:000000000000001f Mode_SYS
           startup.S:17     *ABS*:0000000000000080 I_Bit
           startup.S:18     *ABS*:0000000000000040 F_Bit
           startup.S:20     *ABS*:0000000040000000 sram_bottom
           startup.S:21     *ABS*:0000000040008000 sram_top
           startup.S:22     *ABS*:0000000040008000 stackTop
           startup.S:38     *ABS*:00000000e01fc080 PLL_BASE
           startup.S:39     *ABS*:0000000000000000 PLLCON_OFS
           startup.S:40     *ABS*:0000000000000004 PLLCFG_OFS
           startup.S:41     *ABS*:0000000000000008 PLLSTAT_OFS
           startup.S:42     *ABS*:000000000000000c PLLFEED_OFS
           startup.S:43     *ABS*:0000000000000001 PLLCON_PLLE
           startup.S:44     *ABS*:0000000000000002 PLLCON_PLLC
           startup.S:45     *ABS*:0000000000000400 PLLSTAT_PLOCK
           startup.S:68     .text:0000000000000000 _startup
           startup.S:73     .text:0000000000000000 Vectors
           startup.S:74     .text:0000000000000000 _vectors
           startup.S:139    .text:0000000000000098 handleReset
           startup.S:77     .text:0000000000000000 $a
           startup.S:91     .text:0000000000000020 HandlerUndef
           startup.S:92     .text:0000000000000038 HandlerSWI
           startup.S:93     .text:0000000000000050 HandlerPabort
           startup.S:94     .text:0000000000000068 HandlerDabort
           startup.S:98     .text:0000000000000080 HandlerFIQ
                            *ABS*:0000000040000024 HandleUndef
                            *ABS*:0000000040000028 HandleSWI
                            *ABS*:000000004000002c HandlePabort
                            *ABS*:0000000040000030 HandleDabort
                            *ABS*:0000000040000038 HandleFIQ
           startup.S:228    .text:00000000000000f4 LoopRel
           startup.S:237    .text:0000000000000110 LoopZI
           startup.S:245    .text:0000000000000120 Jump_To_Main
           startup.S:252    .text:0000000000000134 __Return_from_Main
                            *ABS*:0000000040000020 HandleReset
                            *ABS*:0000000040000034 HandleIRQ
                            *ABS*:00000000400074a8 UserStack
                            *ABS*:0000000040007700 SYSStack
                            *ABS*:0000000040007740 SVCStack
                            *ABS*:0000000040007780 UndefStack
                            *ABS*:00000000400077c0 AbortStack
                            *ABS*:0000000040007fc0 IRQStack
                            *ABS*:0000000040008000 FIQStack
           startup.S:262    .text:0000000000000138 $d

UNDEFINED SYMBOLS
lowLevelInit
_etext
_data
_edata
__bss_start__
ARM GAS  /tmp/ccUFenCF.s 			page 7


__bss_end__
exceptionHandlerInit
main
